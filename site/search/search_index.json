{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])"},"docs":[{"location":"","text":"hhhhhhhhhivvv gfmmuyduumfi gnytytnynynnu unyydunu","title":"About"},{"location":"#hhhhhhhhhivvv","text":"","title":"hhhhhhhhhivvv"},{"location":"#gfmmuyduumfi","text":"gnytytnynynnu unyydunu","title":"gfmmuyduumfi"},{"location":"getting-started/env-setup/","text":"Adding a git repository If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown. Configuration Repository :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks. Repository name :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material Repository icon :octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash Code actions :octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Revisioning The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved. Document dates :octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document contributors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document authors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Request Sandbox"},{"location":"getting-started/env-setup/#adding-a-git-repository","text":"If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown.","title":"Adding a git repository"},{"location":"getting-started/env-setup/#configuration","text":"","title":"Configuration"},{"location":"getting-started/env-setup/#repository","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks.","title":"Repository"},{"location":"getting-started/env-setup/#repository-name","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material","title":"Repository name"},{"location":"getting-started/env-setup/#repository-icon","text":":octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash","title":"Repository icon"},{"location":"getting-started/env-setup/#code-actions","text":":octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard:","title":"Code actions"},{"location":"getting-started/env-setup/#revisioning","text":"The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved.","title":"Revisioning"},{"location":"getting-started/env-setup/#document-dates","text":":octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document dates"},{"location":"getting-started/env-setup/#document-contributors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document contributors"},{"location":"getting-started/env-setup/#document-authors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Document authors"},{"location":"getting-started/usecases/","text":"Sample usecase Use-Case 1: Sharding Adding are removing shards What's Sharding","title":"Sample UseCases"},{"location":"getting-started/usecases/#sample-usecase","text":"","title":"Sample usecase"},{"location":"getting-started/usecases/#use-case-1-sharding","text":"","title":"Use-Case 1: Sharding"},{"location":"getting-started/usecases/#adding-are-removing-shards","text":"What's Sharding","title":"Adding are removing shards"},{"location":"setup/adding-a-comment-system/","text":"Adding a comment system Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend. Customization Giscus integration Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: ``` html <script src=\"https://giscus.app/client.js\" data-repo=\" / \" data-repo-id=\"...\" data-category=\"...\" data-category-id=\"...\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"1\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async ``` The comments.html partial (empty by default) is the best place to add the snippet generated by Giscus . Follow the guide on theme extension and override the comments.html partial with: {% if page.meta.comments %} <h2 id=\"__comments\">{{ lang.t(\"meta.comments\") }}</h2> <!-- Insert generated snippet here --> <!-- Synchronize Giscus theme with palette --> <script> var giscus = document.querySelector(\"script[src*=giscus]\") /* Set palette on initial load */ var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" giscus.setAttribute(\"data-theme\", theme) // (1)! } /* Register event handlers after documented loaded */ document.addEventListener(\"DOMContentLoaded\", function() { var ref = document.querySelector(\"[data-md-component=palette]\") ref.addEventListener(\"change\", function() { var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document.querySelector(\".giscus-frame\") frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \"https://giscus.app\" ) } }) }) </script> {% endif %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the comments front matter property to true : --- comments: true --- # Document title ... If you wish to enable comments for an entire folder, you can use the built-in meta plugin .","title":"Adding a comment system"},{"location":"setup/adding-a-comment-system/#adding-a-comment-system","text":"Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend.","title":"Adding a comment system"},{"location":"setup/adding-a-comment-system/#customization","text":"","title":"Customization"},{"location":"setup/adding-a-comment-system/#giscus-integration","text":"Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: ``` html <script src=\"https://giscus.app/client.js\" data-repo=\" / \" data-repo-id=\"...\" data-category=\"...\" data-category-id=\"...\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"1\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async ``` The comments.html partial (empty by default) is the best place to add the snippet generated by Giscus . Follow the guide on theme extension and override the comments.html partial with: {% if page.meta.comments %} <h2 id=\"__comments\">{{ lang.t(\"meta.comments\") }}</h2> <!-- Insert generated snippet here --> <!-- Synchronize Giscus theme with palette --> <script> var giscus = document.querySelector(\"script[src*=giscus]\") /* Set palette on initial load */ var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" giscus.setAttribute(\"data-theme\", theme) // (1)! } /* Register event handlers after documented loaded */ document.addEventListener(\"DOMContentLoaded\", function() { var ref = document.querySelector(\"[data-md-component=palette]\") ref.addEventListener(\"change\", function() { var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document.querySelector(\".giscus-frame\") frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \"https://giscus.app\" ) } }) }) </script> {% endif %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the comments front matter property to true : --- comments: true --- # Document title ... If you wish to enable comments for an entire folder, you can use the built-in meta plugin .","title":"Giscus integration"},{"location":"setup/adding-a-git-repository/","text":"Adding a git repository If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown. Configuration Repository :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks. Repository name :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material Repository icon :octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash Code actions :octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Revisioning The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved. Document dates :octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document contributors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document authors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Getting started"},{"location":"setup/adding-a-git-repository/#adding-a-git-repository","text":"If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown.","title":"Adding a git repository"},{"location":"setup/adding-a-git-repository/#configuration","text":"","title":"Configuration"},{"location":"setup/adding-a-git-repository/#repository","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks.","title":"Repository"},{"location":"setup/adding-a-git-repository/#repository-name","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material","title":"Repository name"},{"location":"setup/adding-a-git-repository/#repository-icon","text":":octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash","title":"Repository icon"},{"location":"setup/adding-a-git-repository/#code-actions","text":":octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard:","title":"Code actions"},{"location":"setup/adding-a-git-repository/#revisioning","text":"The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved.","title":"Revisioning"},{"location":"setup/adding-a-git-repository/#document-dates","text":":octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document dates"},{"location":"setup/adding-a-git-repository/#document-contributors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document contributors"},{"location":"setup/adding-a-git-repository/#document-authors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Document authors"},{"location":"weekly/week1/week1-1/","text":"Adding a comment system Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend. Customization Giscus integration Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: ``` html <script src=\"https://giscus.app/client.js\" data-repo=\" / \" data-repo-id=\"...\" data-category=\"...\" data-category-id=\"...\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"1\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async ``` The comments.html partial (empty by default) is the best place to add the snippet generated by Giscus . Follow the guide on theme extension and override the comments.html partial with: {% if page.meta.comments %} <h2 id=\"__comments\">{{ lang.t(\"meta.comments\") }}</h2> <!-- Insert generated snippet here --> <!-- Synchronize Giscus theme with palette --> <script> var giscus = document.querySelector(\"script[src*=giscus]\") /* Set palette on initial load */ var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" giscus.setAttribute(\"data-theme\", theme) // (1)! } /* Register event handlers after documented loaded */ document.addEventListener(\"DOMContentLoaded\", function() { var ref = document.querySelector(\"[data-md-component=palette]\") ref.addEventListener(\"change\", function() { var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document.querySelector(\".giscus-frame\") frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \"https://giscus.app\" ) } }) }) </script> {% endif %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the comments front matter property to true : --- comments: true --- # Document title ... If you wish to enable comments for an entire folder, you can use the built-in meta plugin .","title":"Hands On"},{"location":"weekly/week1/week1-1/#adding-a-comment-system","text":"Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend.","title":"Adding a comment system"},{"location":"weekly/week1/week1-1/#customization","text":"","title":"Customization"},{"location":"weekly/week1/week1-1/#giscus-integration","text":"Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: ``` html <script src=\"https://giscus.app/client.js\" data-repo=\" / \" data-repo-id=\"...\" data-category=\"...\" data-category-id=\"...\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"1\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async ``` The comments.html partial (empty by default) is the best place to add the snippet generated by Giscus . Follow the guide on theme extension and override the comments.html partial with: {% if page.meta.comments %} <h2 id=\"__comments\">{{ lang.t(\"meta.comments\") }}</h2> <!-- Insert generated snippet here --> <!-- Synchronize Giscus theme with palette --> <script> var giscus = document.querySelector(\"script[src*=giscus]\") /* Set palette on initial load */ var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" giscus.setAttribute(\"data-theme\", theme) // (1)! } /* Register event handlers after documented loaded */ document.addEventListener(\"DOMContentLoaded\", function() { var ref = document.querySelector(\"[data-md-component=palette]\") ref.addEventListener(\"change\", function() { var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document.querySelector(\".giscus-frame\") frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \"https://giscus.app\" ) } }) }) </script> {% endif %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the comments front matter property to true : --- comments: true --- # Document title ... If you wish to enable comments for an entire folder, you can use the built-in meta plugin .","title":"Giscus integration"},{"location":"weekly/week1/week1/","text":"Adding a git repository If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown. Configuration Repository :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks. Repository name :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material Repository icon :octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash Code actions :octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Revisioning The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved. Document dates :octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document contributors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document authors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Week 1"},{"location":"weekly/week1/week1/#adding-a-git-repository","text":"If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown.","title":"Adding a git repository"},{"location":"weekly/week1/week1/#configuration","text":"","title":"Configuration"},{"location":"weekly/week1/week1/#repository","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks.","title":"Repository"},{"location":"weekly/week1/week1/#repository-name","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material","title":"Repository name"},{"location":"weekly/week1/week1/#repository-icon","text":":octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash","title":"Repository icon"},{"location":"weekly/week1/week1/#code-actions","text":":octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard:","title":"Code actions"},{"location":"weekly/week1/week1/#revisioning","text":"The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved.","title":"Revisioning"},{"location":"weekly/week1/week1/#document-dates","text":":octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document dates"},{"location":"weekly/week1/week1/#document-contributors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document contributors"},{"location":"weekly/week1/week1/#document-authors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Document authors"},{"location":"weekly/week2/week2-1/","text":"Adding a comment system Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend. Customization Giscus integration Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: ``` html <script src=\"https://giscus.app/client.js\" data-repo=\" / \" data-repo-id=\"...\" data-category=\"...\" data-category-id=\"...\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"1\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async ``` The comments.html partial (empty by default) is the best place to add the snippet generated by Giscus . Follow the guide on theme extension and override the comments.html partial with: {% if page.meta.comments %} <h2 id=\"__comments\">{{ lang.t(\"meta.comments\") }}</h2> <!-- Insert generated snippet here --> <!-- Synchronize Giscus theme with palette --> <script> var giscus = document.querySelector(\"script[src*=giscus]\") /* Set palette on initial load */ var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" giscus.setAttribute(\"data-theme\", theme) // (1)! } /* Register event handlers after documented loaded */ document.addEventListener(\"DOMContentLoaded\", function() { var ref = document.querySelector(\"[data-md-component=palette]\") ref.addEventListener(\"change\", function() { var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document.querySelector(\".giscus-frame\") frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \"https://giscus.app\" ) } }) }) </script> {% endif %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the comments front matter property to true : --- comments: true --- # Document title ... If you wish to enable comments for an entire folder, you can use the built-in meta plugin .","title":"Hands On"},{"location":"weekly/week2/week2-1/#adding-a-comment-system","text":"Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend.","title":"Adding a comment system"},{"location":"weekly/week2/week2-1/#customization","text":"","title":"Customization"},{"location":"weekly/week2/week2-1/#giscus-integration","text":"Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: ``` html <script src=\"https://giscus.app/client.js\" data-repo=\" / \" data-repo-id=\"...\" data-category=\"...\" data-category-id=\"...\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"1\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async ``` The comments.html partial (empty by default) is the best place to add the snippet generated by Giscus . Follow the guide on theme extension and override the comments.html partial with: {% if page.meta.comments %} <h2 id=\"__comments\">{{ lang.t(\"meta.comments\") }}</h2> <!-- Insert generated snippet here --> <!-- Synchronize Giscus theme with palette --> <script> var giscus = document.querySelector(\"script[src*=giscus]\") /* Set palette on initial load */ var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" giscus.setAttribute(\"data-theme\", theme) // (1)! } /* Register event handlers after documented loaded */ document.addEventListener(\"DOMContentLoaded\", function() { var ref = document.querySelector(\"[data-md-component=palette]\") ref.addEventListener(\"change\", function() { var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document.querySelector(\".giscus-frame\") frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \"https://giscus.app\" ) } }) }) </script> {% endif %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the comments front matter property to true : --- comments: true --- # Document title ... If you wish to enable comments for an entire folder, you can use the built-in meta plugin .","title":"Giscus integration"},{"location":"weekly/week2/week2/","text":"Adding a git repository If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown. Configuration Repository :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks. Repository name :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material Repository icon :octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash Code actions :octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Revisioning The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved. Document dates :octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document contributors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document authors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Getting started"},{"location":"weekly/week2/week2/#adding-a-git-repository","text":"If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown.","title":"Adding a git repository"},{"location":"weekly/week2/week2/#configuration","text":"","title":"Configuration"},{"location":"weekly/week2/week2/#repository","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks.","title":"Repository"},{"location":"weekly/week2/week2/#repository-name","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material","title":"Repository name"},{"location":"weekly/week2/week2/#repository-icon","text":":octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash","title":"Repository icon"},{"location":"weekly/week2/week2/#code-actions","text":":octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard:","title":"Code actions"},{"location":"weekly/week2/week2/#revisioning","text":"The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved.","title":"Revisioning"},{"location":"weekly/week2/week2/#document-dates","text":":octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document dates"},{"location":"weekly/week2/week2/#document-contributors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document contributors"},{"location":"weekly/week2/week2/#document-authors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Document authors"},{"location":"weekly/week3/week3-1/","text":"Adding a comment system Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend. Customization Giscus integration Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: ``` html <script src=\"https://giscus.app/client.js\" data-repo=\" / \" data-repo-id=\"...\" data-category=\"...\" data-category-id=\"...\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"1\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async ``` The comments.html partial (empty by default) is the best place to add the snippet generated by Giscus . Follow the guide on theme extension and override the comments.html partial with: {% if page.meta.comments %} <h2 id=\"__comments\">{{ lang.t(\"meta.comments\") }}</h2> <!-- Insert generated snippet here --> <!-- Synchronize Giscus theme with palette --> <script> var giscus = document.querySelector(\"script[src*=giscus]\") /* Set palette on initial load */ var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" giscus.setAttribute(\"data-theme\", theme) // (1)! } /* Register event handlers after documented loaded */ document.addEventListener(\"DOMContentLoaded\", function() { var ref = document.querySelector(\"[data-md-component=palette]\") ref.addEventListener(\"change\", function() { var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document.querySelector(\".giscus-frame\") frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \"https://giscus.app\" ) } }) }) </script> {% endif %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the comments front matter property to true : --- comments: true --- # Document title ... If you wish to enable comments for an entire folder, you can use the built-in meta plugin .","title":"Hands On"},{"location":"weekly/week3/week3-1/#adding-a-comment-system","text":"Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend.","title":"Adding a comment system"},{"location":"weekly/week3/week3-1/#customization","text":"","title":"Customization"},{"location":"weekly/week3/week3-1/#giscus-integration","text":"Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: ``` html <script src=\"https://giscus.app/client.js\" data-repo=\" / \" data-repo-id=\"...\" data-category=\"...\" data-category-id=\"...\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"1\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async ``` The comments.html partial (empty by default) is the best place to add the snippet generated by Giscus . Follow the guide on theme extension and override the comments.html partial with: {% if page.meta.comments %} <h2 id=\"__comments\">{{ lang.t(\"meta.comments\") }}</h2> <!-- Insert generated snippet here --> <!-- Synchronize Giscus theme with palette --> <script> var giscus = document.querySelector(\"script[src*=giscus]\") /* Set palette on initial load */ var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" giscus.setAttribute(\"data-theme\", theme) // (1)! } /* Register event handlers after documented loaded */ document.addEventListener(\"DOMContentLoaded\", function() { var ref = document.querySelector(\"[data-md-component=palette]\") ref.addEventListener(\"change\", function() { var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document.querySelector(\".giscus-frame\") frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \"https://giscus.app\" ) } }) }) </script> {% endif %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the comments front matter property to true : --- comments: true --- # Document title ... If you wish to enable comments for an entire folder, you can use the built-in meta plugin .","title":"Giscus integration"},{"location":"weekly/week3/week3/","text":"Adding a git repository If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown. Configuration Repository :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks. Repository name :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material Repository icon :octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash Code actions :octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Revisioning The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved. Document dates :octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document contributors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document authors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Getting started"},{"location":"weekly/week3/week3/#adding-a-git-repository","text":"If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown.","title":"Adding a git repository"},{"location":"weekly/week3/week3/#configuration","text":"","title":"Configuration"},{"location":"weekly/week3/week3/#repository","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks.","title":"Repository"},{"location":"weekly/week3/week3/#repository-name","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material","title":"Repository name"},{"location":"weekly/week3/week3/#repository-icon","text":":octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash","title":"Repository icon"},{"location":"weekly/week3/week3/#code-actions","text":":octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard:","title":"Code actions"},{"location":"weekly/week3/week3/#revisioning","text":"The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved.","title":"Revisioning"},{"location":"weekly/week3/week3/#document-dates","text":":octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document dates"},{"location":"weekly/week3/week3/#document-contributors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document contributors"},{"location":"weekly/week3/week3/#document-authors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Document authors"}]}