{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])"},"docs":[{"location":"","text":"Welcome To SosoTech We specialize in IT training and Hands-on. What we do We train New and Working IT Professionals on the following fields: DevOps SRE Cloud Engineers AI Engineers","title":"About Us"},{"location":"#welcome-to-sosotech","text":"We specialize in IT training and Hands-on.","title":"Welcome To SosoTech"},{"location":"#what-we-do","text":"We train New and Working IT Professionals on the following fields: DevOps SRE Cloud Engineers AI Engineers","title":"What we do"},{"location":"getting-started/env-setup/","text":"Adding a git repository If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown. Configuration Repository :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks. Repository name :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material Repository icon :octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash Code actions :octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Revisioning The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved. Document dates :octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document contributors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document authors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Request Sandbox"},{"location":"getting-started/env-setup/#adding-a-git-repository","text":"If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown.","title":"Adding a git repository"},{"location":"getting-started/env-setup/#configuration","text":"","title":"Configuration"},{"location":"getting-started/env-setup/#repository","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks.","title":"Repository"},{"location":"getting-started/env-setup/#repository-name","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material","title":"Repository name"},{"location":"getting-started/env-setup/#repository-icon","text":":octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash","title":"Repository icon"},{"location":"getting-started/env-setup/#code-actions","text":":octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard:","title":"Code actions"},{"location":"getting-started/env-setup/#revisioning","text":"The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved.","title":"Revisioning"},{"location":"getting-started/env-setup/#document-dates","text":":octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document dates"},{"location":"getting-started/env-setup/#document-contributors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document contributors"},{"location":"getting-started/env-setup/#document-authors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Document authors"},{"location":"getting-started/usecases/","text":"Sample usecase Use-Case 1: Sharding Adding are removing shards What's Sharding","title":"Sample UseCases"},{"location":"getting-started/usecases/#sample-usecase","text":"","title":"Sample usecase"},{"location":"getting-started/usecases/#use-case-1-sharding","text":"","title":"Use-Case 1: Sharding"},{"location":"getting-started/usecases/#adding-are-removing-shards","text":"What's Sharding","title":"Adding are removing shards"},{"location":"setup/adding-a-comment-system/","text":"Adding a comment system Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend. Customization Giscus integration Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: ``` html <script src=\"https://giscus.app/client.js\" data-repo=\" / \" data-repo-id=\"...\" data-category=\"...\" data-category-id=\"...\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"1\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async ``` The comments.html partial (empty by default) is the best place to add the snippet generated by Giscus . Follow the guide on theme extension and override the comments.html partial with: {% if page.meta.comments %} <h2 id=\"__comments\">{{ lang.t(\"meta.comments\") }}</h2> <!-- Insert generated snippet here --> <!-- Synchronize Giscus theme with palette --> <script> var giscus = document.querySelector(\"script[src*=giscus]\") /* Set palette on initial load */ var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" giscus.setAttribute(\"data-theme\", theme) // (1)! } /* Register event handlers after documented loaded */ document.addEventListener(\"DOMContentLoaded\", function() { var ref = document.querySelector(\"[data-md-component=palette]\") ref.addEventListener(\"change\", function() { var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document.querySelector(\".giscus-frame\") frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \"https://giscus.app\" ) } }) }) </script> {% endif %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the comments front matter property to true : --- comments: true --- # Document title ... If you wish to enable comments for an entire folder, you can use the built-in meta plugin .","title":"Adding a comment system"},{"location":"setup/adding-a-comment-system/#adding-a-comment-system","text":"Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend.","title":"Adding a comment system"},{"location":"setup/adding-a-comment-system/#customization","text":"","title":"Customization"},{"location":"setup/adding-a-comment-system/#giscus-integration","text":"Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: ``` html <script src=\"https://giscus.app/client.js\" data-repo=\" / \" data-repo-id=\"...\" data-category=\"...\" data-category-id=\"...\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"1\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async ``` The comments.html partial (empty by default) is the best place to add the snippet generated by Giscus . Follow the guide on theme extension and override the comments.html partial with: {% if page.meta.comments %} <h2 id=\"__comments\">{{ lang.t(\"meta.comments\") }}</h2> <!-- Insert generated snippet here --> <!-- Synchronize Giscus theme with palette --> <script> var giscus = document.querySelector(\"script[src*=giscus]\") /* Set palette on initial load */ var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" giscus.setAttribute(\"data-theme\", theme) // (1)! } /* Register event handlers after documented loaded */ document.addEventListener(\"DOMContentLoaded\", function() { var ref = document.querySelector(\"[data-md-component=palette]\") ref.addEventListener(\"change\", function() { var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document.querySelector(\".giscus-frame\") frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \"https://giscus.app\" ) } }) }) </script> {% endif %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the comments front matter property to true : --- comments: true --- # Document title ... If you wish to enable comments for an entire folder, you can use the built-in meta plugin .","title":"Giscus integration"},{"location":"setup/adding-a-git-repository/","text":"Adding a git repository If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown. Configuration Repository :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks. Repository name :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material Repository icon :octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash Code actions :octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Revisioning The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved. Document dates :octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document contributors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document authors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Getting started"},{"location":"setup/adding-a-git-repository/#adding-a-git-repository","text":"If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown.","title":"Adding a git repository"},{"location":"setup/adding-a-git-repository/#configuration","text":"","title":"Configuration"},{"location":"setup/adding-a-git-repository/#repository","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks.","title":"Repository"},{"location":"setup/adding-a-git-repository/#repository-name","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material","title":"Repository name"},{"location":"setup/adding-a-git-repository/#repository-icon","text":":octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash","title":"Repository icon"},{"location":"setup/adding-a-git-repository/#code-actions","text":":octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard:","title":"Code actions"},{"location":"setup/adding-a-git-repository/#revisioning","text":"The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved.","title":"Revisioning"},{"location":"setup/adding-a-git-repository/#document-dates","text":":octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document dates"},{"location":"setup/adding-a-git-repository/#document-contributors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document contributors"},{"location":"setup/adding-a-git-repository/#document-authors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Document authors"},{"location":"weekly/week1/week1-1/","text":"Cloud Technologies Defining cloud computing Defining private, public, and hybrid cloud Exploring the components of cloud infrastructure Defining the different Service Models What is Cloud Computing? Cloud computing is the use of hosted services, such as servers, data storage, databases, software, and networking over the internet\u00ac\u200a\u2014\u200ainstead of directly accessing your computer hard drive. Types of cloud computing Cloud computing is offered in 3 major forms: private, public, and hybrid cloud. Private Cloud: The private cloud computing service is a cloud computing model where the infrastructure is dedicated only to select users instead of the general public, either over the Internet or a private internal network. Other names for the private cloud are internal or corporate cloud. Some private cloud providers are VMware-vRealize Suite Cloud Management Platform, AWS-Virtual Private Cloud, Microsoft-Azure Private Cloud\u2026 Public Cloud: The public cloud is defined as computing services offered by third-party providers over the public Internet, making them available to anyone who wants to use or purchase them. They may be free or sold on-demand, allowing customers to pay only per usage for the CPU cycles, storage, or bandwidth they consume. Some public cloud services are AWS, GCP, Azure, IBM Cloud, Alibaba Cloud\u2026 Hybrid Cloud: A hybrid cloud is a computing environment that combines an on-premises data center (also called a private cloud) with a public cloud, allowing data and applications to be shared between them. Some public cloud providers are VMware, Microsoft Azure\u2026 Components of cloud infrastructure Client-side Infrastructure: Here, users interact with the cloud through a front-end GUI (Graphical User Interface). Desktop, laptops, mobiles, tablets, and others are used on the client-side to access services. Application: The application may be any software or platform that a client wants to access. The operating system: The cloud operating system manages the operation, the virtual servers, execution and processes of virtual machines and virtual infrastructure, as well as the back-end hardware and software resources. Service: Cloud Services are offered in different models. These services are being provided based on the client\u2019s request. Some of the service models are seen below Service Models Cloud-Computing providers offer their \u201cservices\u201d according to different models, of which the three standard models per NIST are Infrastructure as a Service (IaaS), Platform as a Service (PaaS), and Software as a Service (SaaS). IAAS: Infrastructure As A Service (IAAS) is means of delivering computing infrastructure as on-demand services. It is one of the three fundamental cloud service model servers\u2019 storage network operating systems. In the user purchasing servers, software data center space, or network equipment and renting those resources as a fully outsourced service can demand model. It allows dynamic scaling, and the resources are distributed as a service. It generally includes multiple users on a single piece of hardware. PAAS: Platform as A Service (PAAS) is a cloud delivery model for applications composed of services managed by a third party. It provides elastic scaling of your application which allows developers to build applications and services over the internet and the deployment models include public, private and hybrid. SAAS: Software As A Service (SAAS) allows users to run existing online applications and it is a model software that is deployed as a hosting service and is accessed over Output Rephrased/Re-written Text the internet or software delivery model during which software and its associated data are hosted centrally and accessed using their client, usually an online browser over the web. SAAS services are used for the development and deployment of modern applications. The emergence of Cloud computing has given rise to more as-a-service offerings. Some of them include: - AIaaS: AI as a service - DaaS: Desktop as a service - ITaaS: IT as a service - RaaS: Ransomware as a service. Top benefits of cloud computing High Speed: the ability to spin up new instances in a matter of seconds. Efficiency and Cost Reduction Provides efficient Data Security Scalable: ease with quickly\u200a\u2014\u200ascale up/down infrastructures. Collaboration: Cloud environments enable better collaboration across teams. Provides unlimited Storage Capacity. Provides ease in Back-up and Restoring of Data Reliability: Cloud computing makes data backup, disaster recovery, and business continuity easier and less expensive because data can be mirrored at multiple redundant sites on the cloud provider\u2019s network. FOCUS: AWS CLOUD What Is Amazon Web Services(AWS): Amazon Web Services(AWS) is Amazon\u2019s cloud computing platform that offers a mix of packaged platform as a service (PaaS), software as a service (SaaS), and infrastructure as a service (IaaS). ### EC2 Amazon EC2 is AWS primary web service that provides resizable compute capacity in the cloud. Instance types: Amazon EC2 provides a wide selection of instance types optimized to fit different use cases. Instance types comprise varying combinations of CPU, memory, storage, and networking capacity and give you the flexibility to choose the appropriate mix of resources for your applications. Each instance type includes one or more instance sizes, allowing you to scale your resources to the requirements of your target workload. Example instance Family: c4 Compute optimized\u2014For workloads requiring significant processing r3 Memory optimized\u2014For memory-intensive workloads i2 Storage optimized\u2014For workloads requiring high amounts of fast SSD storage g2 GPU-based instances\u2014Intended for graphics and general-purpose GPU compute workloads Amazon Machine Images (AMIs): Defines the initial software that will be on an instance when it is launched. An AMI defines; The Operating System (OS) and its configuration, The initial state of any patches, Application or system software. AMI\u2019s can be AWS published, from the AWS Marketplace, Generated from Existing Instances, or Uploaded Virtual Servers Security Groups: This is a VPC concept. If an instance is running in an Amazon VPC, you can change which security groups are associated with an instance while the instance is running. EBS: Is type of \u201cblock storage\u201d volume offering by AWS. EBS provides persistent block-level storage volumes for use with Amazon EC2 instances. Instance Stores: Is another type of \u201cblock storage\u201d volume offering by AWS for your instance. This storage is located on disks that are physically attached to the host computer. ### S3 Amazon Simple Storage Service is a secure, durable, and highly-scalable cloud storage. Some use cases for cloud storage include: - Backup and archive for on-premises or cloud data. - Content, media, and software storage and distribution. - Big data analytics. - Static website hosting. - Cloud-native mobile and Internet application hosting. ### VPC The Amazon Virtual Private Cloud (Amazon VPC) is a custom-defined virtual network within the AWS Cloud. ![cloud1](photos/cloud5.png) VPC COMPONENTS: An Amazon VPC consists of the following main components: Subnets, Route tables, Dynamic Host Configuration Protocol (DHCP) option sets Security groups, Network Access Control Lists (ACLs). Also, optional components: Internet Gateways (IGWs), Elastic IP (EIP) addresses, Elastic Network Interfaces (ENIs), Endpoints, Peering, Network Address Translation (NATs) instances and NAT gateways, Virtual Private Gateway (VPG), Customer Gateways (CGWs), and Virtual Private Networks (VPNs) ***Subnets:*** A subnet is a segment of an Amazon VPC\u2019s IP address range. Subnets reside within one Availability Zone and cannot span zones; You can, however, have multiple subnets in one Availability Zone. Each subnet must be associated with a route table, which controls the routing for the subnet. ***Route Tables:*** A route table is a logical construct within an Amazon VPC that contains a set of rules (called routes) that are applied to the subnet and used to determine where network traffic is directed. ***Internet Gateways:*** IGW allows communication between instances in your Amazon VPC and the Internet. ***Dynamic Host Configuration*** Protocol (DHCP) Option Sets: provides a standard for passing configuration information to hosts on a TCP/IP network. AWS automatically creates and associates a DHCP option set for your Amazon VPC upon creation and sets two options: domain-name-servers (defaulted to AmazonProvidedDNS) and domain-name (defaulted to the domain name for your region). ### IAM With AWS IAM Identity Center (successor to AWS Single Sign-On), you can manage sign-in security for your workforce identities, also known as workforce users. IAM Identity Center provides one place where you can create or connect workforce users and centrally manage their access across all their AWS accounts and applications. For more on IAM chack the link: IAM ### AWS ELASTIC LOAD BALANCER (ELB) AWS has an Elastic Load Balancer that is used to distribute incoming traffic across multiple targets, such as EC2 instances, containers, and IP addresses, in one or more Availability Zones. It monitors the health of its registered targets, and routes traffic only to the healthy targets. Elastic Load Balancing supports routing and load balancing of Hypertext. Transfer Protocol (HTTP), Hypertext Transfer Protocol Secure (HTTPS), Transmission Control Protocol (TCP), and Secure Sockets Layer (SSL) traffic to Amazon EC2 instances. Types of AWS ELB: The two major Elastic load balancers are: ***Application Load Balancer*** Application layer that describes the use of HTTP and HTTPS connections from clients to the load balancer and from the load balancer to your back-end instance. ***Network Load Balancer*** Are used to route traffic through layer 4, based IPs and TCP or UDP ports. ### EKS Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that you can use to run Kubernetes on AWS without needing to install, operate, and maintain your own Kubernetes control plane or nodes. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. For more on EKS chack the link: [EKS]https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html","title":"Getting Started"},{"location":"weekly/week1/week1-1/#cloud-technologies","text":"Defining cloud computing Defining private, public, and hybrid cloud Exploring the components of cloud infrastructure Defining the different Service Models","title":"Cloud Technologies"},{"location":"weekly/week1/week1-1/#what-is-cloud-computing","text":"Cloud computing is the use of hosted services, such as servers, data storage, databases, software, and networking over the internet\u00ac\u200a\u2014\u200ainstead of directly accessing your computer hard drive.","title":"What is Cloud Computing?"},{"location":"weekly/week1/week1-1/#types-of-cloud-computing","text":"Cloud computing is offered in 3 major forms: private, public, and hybrid cloud. Private Cloud: The private cloud computing service is a cloud computing model where the infrastructure is dedicated only to select users instead of the general public, either over the Internet or a private internal network. Other names for the private cloud are internal or corporate cloud. Some private cloud providers are VMware-vRealize Suite Cloud Management Platform, AWS-Virtual Private Cloud, Microsoft-Azure Private Cloud\u2026 Public Cloud: The public cloud is defined as computing services offered by third-party providers over the public Internet, making them available to anyone who wants to use or purchase them. They may be free or sold on-demand, allowing customers to pay only per usage for the CPU cycles, storage, or bandwidth they consume. Some public cloud services are AWS, GCP, Azure, IBM Cloud, Alibaba Cloud\u2026 Hybrid Cloud: A hybrid cloud is a computing environment that combines an on-premises data center (also called a private cloud) with a public cloud, allowing data and applications to be shared between them. Some public cloud providers are VMware, Microsoft Azure\u2026","title":"Types of cloud computing"},{"location":"weekly/week1/week1-1/#components-of-cloud-infrastructure","text":"Client-side Infrastructure: Here, users interact with the cloud through a front-end GUI (Graphical User Interface). Desktop, laptops, mobiles, tablets, and others are used on the client-side to access services. Application: The application may be any software or platform that a client wants to access. The operating system: The cloud operating system manages the operation, the virtual servers, execution and processes of virtual machines and virtual infrastructure, as well as the back-end hardware and software resources. Service: Cloud Services are offered in different models. These services are being provided based on the client\u2019s request. Some of the service models are seen below","title":"Components of cloud infrastructure"},{"location":"weekly/week1/week1-1/#service-models","text":"Cloud-Computing providers offer their \u201cservices\u201d according to different models, of which the three standard models per NIST are Infrastructure as a Service (IaaS), Platform as a Service (PaaS), and Software as a Service (SaaS). IAAS: Infrastructure As A Service (IAAS) is means of delivering computing infrastructure as on-demand services. It is one of the three fundamental cloud service model servers\u2019 storage network operating systems. In the user purchasing servers, software data center space, or network equipment and renting those resources as a fully outsourced service can demand model. It allows dynamic scaling, and the resources are distributed as a service. It generally includes multiple users on a single piece of hardware. PAAS: Platform as A Service (PAAS) is a cloud delivery model for applications composed of services managed by a third party. It provides elastic scaling of your application which allows developers to build applications and services over the internet and the deployment models include public, private and hybrid. SAAS: Software As A Service (SAAS) allows users to run existing online applications and it is a model software that is deployed as a hosting service and is accessed over Output Rephrased/Re-written Text the internet or software delivery model during which software and its associated data are hosted centrally and accessed using their client, usually an online browser over the web. SAAS services are used for the development and deployment of modern applications. The emergence of Cloud computing has given rise to more as-a-service offerings. Some of them include: - AIaaS: AI as a service - DaaS: Desktop as a service - ITaaS: IT as a service - RaaS: Ransomware as a service.","title":"Service Models"},{"location":"weekly/week1/week1-1/#top-benefits-of-cloud-computing","text":"High Speed: the ability to spin up new instances in a matter of seconds. Efficiency and Cost Reduction Provides efficient Data Security Scalable: ease with quickly\u200a\u2014\u200ascale up/down infrastructures. Collaboration: Cloud environments enable better collaboration across teams. Provides unlimited Storage Capacity. Provides ease in Back-up and Restoring of Data Reliability: Cloud computing makes data backup, disaster recovery, and business continuity easier and less expensive because data can be mirrored at multiple redundant sites on the cloud provider\u2019s network.","title":"Top benefits of cloud computing"},{"location":"weekly/week1/week1-1/#focus-aws-cloud","text":"What Is Amazon Web Services(AWS): Amazon Web Services(AWS) is Amazon\u2019s cloud computing platform that offers a mix of packaged platform as a service (PaaS), software as a service (SaaS), and infrastructure as a service (IaaS). ### EC2 Amazon EC2 is AWS primary web service that provides resizable compute capacity in the cloud. Instance types: Amazon EC2 provides a wide selection of instance types optimized to fit different use cases. Instance types comprise varying combinations of CPU, memory, storage, and networking capacity and give you the flexibility to choose the appropriate mix of resources for your applications. Each instance type includes one or more instance sizes, allowing you to scale your resources to the requirements of your target workload. Example instance Family: c4 Compute optimized\u2014For workloads requiring significant processing r3 Memory optimized\u2014For memory-intensive workloads i2 Storage optimized\u2014For workloads requiring high amounts of fast SSD storage g2 GPU-based instances\u2014Intended for graphics and general-purpose GPU compute workloads Amazon Machine Images (AMIs): Defines the initial software that will be on an instance when it is launched. An AMI defines; The Operating System (OS) and its configuration, The initial state of any patches, Application or system software. AMI\u2019s can be AWS published, from the AWS Marketplace, Generated from Existing Instances, or Uploaded Virtual Servers Security Groups: This is a VPC concept. If an instance is running in an Amazon VPC, you can change which security groups are associated with an instance while the instance is running. EBS: Is type of \u201cblock storage\u201d volume offering by AWS. EBS provides persistent block-level storage volumes for use with Amazon EC2 instances. Instance Stores: Is another type of \u201cblock storage\u201d volume offering by AWS for your instance. This storage is located on disks that are physically attached to the host computer. ### S3 Amazon Simple Storage Service is a secure, durable, and highly-scalable cloud storage. Some use cases for cloud storage include: - Backup and archive for on-premises or cloud data. - Content, media, and software storage and distribution. - Big data analytics. - Static website hosting. - Cloud-native mobile and Internet application hosting. ### VPC The Amazon Virtual Private Cloud (Amazon VPC) is a custom-defined virtual network within the AWS Cloud. ![cloud1](photos/cloud5.png) VPC COMPONENTS: An Amazon VPC consists of the following main components: Subnets, Route tables, Dynamic Host Configuration Protocol (DHCP) option sets Security groups, Network Access Control Lists (ACLs). Also, optional components: Internet Gateways (IGWs), Elastic IP (EIP) addresses, Elastic Network Interfaces (ENIs), Endpoints, Peering, Network Address Translation (NATs) instances and NAT gateways, Virtual Private Gateway (VPG), Customer Gateways (CGWs), and Virtual Private Networks (VPNs) ***Subnets:*** A subnet is a segment of an Amazon VPC\u2019s IP address range. Subnets reside within one Availability Zone and cannot span zones; You can, however, have multiple subnets in one Availability Zone. Each subnet must be associated with a route table, which controls the routing for the subnet. ***Route Tables:*** A route table is a logical construct within an Amazon VPC that contains a set of rules (called routes) that are applied to the subnet and used to determine where network traffic is directed. ***Internet Gateways:*** IGW allows communication between instances in your Amazon VPC and the Internet. ***Dynamic Host Configuration*** Protocol (DHCP) Option Sets: provides a standard for passing configuration information to hosts on a TCP/IP network. AWS automatically creates and associates a DHCP option set for your Amazon VPC upon creation and sets two options: domain-name-servers (defaulted to AmazonProvidedDNS) and domain-name (defaulted to the domain name for your region). ### IAM With AWS IAM Identity Center (successor to AWS Single Sign-On), you can manage sign-in security for your workforce identities, also known as workforce users. IAM Identity Center provides one place where you can create or connect workforce users and centrally manage their access across all their AWS accounts and applications. For more on IAM chack the link: IAM ### AWS ELASTIC LOAD BALANCER (ELB) AWS has an Elastic Load Balancer that is used to distribute incoming traffic across multiple targets, such as EC2 instances, containers, and IP addresses, in one or more Availability Zones. It monitors the health of its registered targets, and routes traffic only to the healthy targets. Elastic Load Balancing supports routing and load balancing of Hypertext. Transfer Protocol (HTTP), Hypertext Transfer Protocol Secure (HTTPS), Transmission Control Protocol (TCP), and Secure Sockets Layer (SSL) traffic to Amazon EC2 instances. Types of AWS ELB: The two major Elastic load balancers are: ***Application Load Balancer*** Application layer that describes the use of HTTP and HTTPS connections from clients to the load balancer and from the load balancer to your back-end instance. ***Network Load Balancer*** Are used to route traffic through layer 4, based IPs and TCP or UDP ports. ### EKS Amazon Elastic Kubernetes Service (Amazon EKS) is a managed service that you can use to run Kubernetes on AWS without needing to install, operate, and maintain your own Kubernetes control plane or nodes. Kubernetes is an open-source system for automating the deployment, scaling, and management of containerized applications. For more on EKS chack the link: [EKS]https://docs.aws.amazon.com/eks/latest/userguide/what-is-eks.html","title":"FOCUS: AWS CLOUD"},{"location":"weekly/week1/week1/","text":"System Requirements Windows OS systems will be the preferred OS that will be used throughout this program. Students with MaC OS can still use their MAC pcs, but may have some diffuculties with running some Windows-specific commands. ## Installation links Install IAM EKS authenticator Right-Click to open Link in a New Tab curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.15.10/2020-02-22/bin/linux/amd64/aws-iam-authenticator chmod +x ./aws-iam-authenticator sudo mv ./aws-iam-authenticator /usr/local/bin aws-iam-authenticator help Install docker in ec2 Right-Click to open Link in a New Tab Install AWSCLI Right-Click to open Link in a New Tab Install Terraform Right-Click to open Link in a New Tab Install Kubens + kubectx Right-Click to open Link in a New Tab Install HelM Right-Click to open Link in a New Tab curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 chmod 700 get_helm.sh ./get_helm.sh Install Kubectl Right-Click to open Link in a New Tab curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" curl -LO \"https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256\" echo \"$(<kubectl.sha256) kubectl\" | sha256sum --check sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl kubectl version --client --output=yaml Install MkDocs Right-Click to open Link in a New Tab pip install mkdocs mkdocs helm mkdocs new my-soso-package cd my-soso-package tree Install PiP on RHeL REDHAT sudo yum info python*-pip //get the pip version, then install the version sudo yum install python39-pip python3 --version curl -O https://bootstrap.pypa.io/get-pip.py python3 get-pip.py --user Install Trivy Right-Click to open Link in a New Tab sudo yum -y update sudo wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb sudo dpkg -i trivy_0.18.3_Linux-64bit.deb trivy i nginx //scanning nginx image trivy i nginx | grep -i critical trivy i nginx:alpine | grep -i critical","title":"Installations"},{"location":"weekly/week1/week1/#system-requirements","text":"Windows OS systems will be the preferred OS that will be used throughout this program. Students with MaC OS can still use their MAC pcs, but may have some diffuculties with running some Windows-specific commands. ## Installation links","title":"System Requirements"},{"location":"weekly/week1/week1/#install-iam-eks-authenticator","text":"Right-Click to open Link in a New Tab curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.15.10/2020-02-22/bin/linux/amd64/aws-iam-authenticator chmod +x ./aws-iam-authenticator sudo mv ./aws-iam-authenticator /usr/local/bin aws-iam-authenticator help","title":"Install IAM EKS authenticator"},{"location":"weekly/week1/week1/#install-docker-in-ec2","text":"Right-Click to open Link in a New Tab","title":"Install docker in ec2"},{"location":"weekly/week1/week1/#install-awscli","text":"Right-Click to open Link in a New Tab","title":"Install AWSCLI"},{"location":"weekly/week1/week1/#install-terraform","text":"Right-Click to open Link in a New Tab","title":"Install Terraform"},{"location":"weekly/week1/week1/#install-kubens-kubectx","text":"Right-Click to open Link in a New Tab","title":"Install Kubens + kubectx"},{"location":"weekly/week1/week1/#install-helm","text":"Right-Click to open Link in a New Tab curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 chmod 700 get_helm.sh ./get_helm.sh","title":"Install HelM"},{"location":"weekly/week1/week1/#install-kubectl","text":"Right-Click to open Link in a New Tab curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" curl -LO \"https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256\" echo \"$(<kubectl.sha256) kubectl\" | sha256sum --check sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl kubectl version --client --output=yaml","title":"Install Kubectl"},{"location":"weekly/week1/week1/#install-mkdocs","text":"Right-Click to open Link in a New Tab pip install mkdocs mkdocs helm mkdocs new my-soso-package cd my-soso-package tree","title":"Install MkDocs"},{"location":"weekly/week1/week1/#install-pip-on-rhel","text":"REDHAT sudo yum info python*-pip //get the pip version, then install the version sudo yum install python39-pip python3 --version curl -O https://bootstrap.pypa.io/get-pip.py python3 get-pip.py --user","title":"Install PiP on RHeL"},{"location":"weekly/week1/week1/#install-trivy","text":"Right-Click to open Link in a New Tab sudo yum -y update sudo wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb sudo dpkg -i trivy_0.18.3_Linux-64bit.deb trivy i nginx //scanning nginx image trivy i nginx | grep -i critical trivy i nginx:alpine | grep -i critical","title":"Install Trivy"},{"location":"weekly/week2/week2-1/","text":"ELK - Elastic Stack ELK Stack is the world\u2019s most popular log management platform. The ELK stack is an acronym used to describe a stack that comprises of three popular projects: Elasticsearch, Logstash, and Kibana. Elasticsearch is a distributed search and analytics engine built on Apache Lucene Logstash is used for both shipping as well as processing and storing logs Kibana is a visualization tool which is hosted through Nginx or Apache Some popular Use Cases for ELK are: Logging, Matrics, Security Analysis, Business Analysis - Logging - logging and analysing Data, like gaming data - Matrics - like NASA Rover can sent telematrics, sensor data - Security Analysis - Helps with securing comunication in Apps like Slack - Business Analysis - Helps with matching people ElasticSearch With ElasticSearch, User can sends search quary to your website and your server send those requests to ElasticSearch, Elasticsearch then processes this request and Responds back to the user, through the Server. Elasticsearch Architecture: Key Components Elasticsearch Cluster is composed of a group of nodes that store data. Elasticsearch Node is an instance that runs in a cluster. Multiple nodes can be run on a single machine. When Elastic is running, you will have an instance of elastic known as Node. Each Node Has a unique ID and a node. Each Node belongs to a single cluster. Data is stored as documents in Elasticsearch. Indices are used to group documents that are related to each other. When an Index is created, it comes with a Shard, by default. There are the three main options to configure an Elasticsearch node: Elasticsearch master node Elasticsearch data node Elasticsearch client node Search movement - client --> servers --> ElasticSearch Shards is where data is stored. What you create an Index, you can create multiple shards that are distributed across nodes. Each shard has its replica to recover data in case of node failure. The primary shard and replica shard is always placed on different nodes. Horizontal scaling or scale-out is the main reason to shard a database. The number of shards depends heavily on the amount of data we have. Shard Example use Case 1 A BCBSNC Elastic engineer has 900k documents that they want to store. Each Shard can only Hold a maximum of 300k Documents Two more shards of 300GB each will be added bringing the total storage capacity to 900K Documents Shard Example use Case 2 Scenario 1: An Elastic engineer searches 500k documents that is stored in a single Shard The response time for searching 500k Documents in a single shard is 10 seconds. Scenario 2: An Elastic engineer runs a parallel searches of 500k documents that are distributed in 5 Shard. The response time for searching 100k Documents/Shard will be 2 seconds. So, the response time for searching all 500k Documents that are distributed amongst the 5 shard will still be 2 seconds. Kibana Kibana is a data visualization and exploration tool used for log and time-series analytics, application monitoring, and operational intelligence use cases. It offers powerful and easy-to-use features such as histograms, line graphs, pie charts, heat maps, and built-in geospatial support. Kibana Aggregations There are two main types of aggregations Metric aggregations are used to calculate a value for each bucket based on the documents inside the bucket. Bucket aggregations are used groups documents together in one bucket according to your logic and requirements, while the Metric aggregations For More information on Kibana,: Click link","title":"Hands On"},{"location":"weekly/week2/week2-1/#elk-elastic-stack","text":"ELK Stack is the world\u2019s most popular log management platform. The ELK stack is an acronym used to describe a stack that comprises of three popular projects: Elasticsearch, Logstash, and Kibana. Elasticsearch is a distributed search and analytics engine built on Apache Lucene Logstash is used for both shipping as well as processing and storing logs Kibana is a visualization tool which is hosted through Nginx or Apache Some popular Use Cases for ELK are: Logging, Matrics, Security Analysis, Business Analysis - Logging - logging and analysing Data, like gaming data - Matrics - like NASA Rover can sent telematrics, sensor data - Security Analysis - Helps with securing comunication in Apps like Slack - Business Analysis - Helps with matching people","title":"ELK - Elastic Stack"},{"location":"weekly/week2/week2-1/#elasticsearch","text":"With ElasticSearch, User can sends search quary to your website and your server send those requests to ElasticSearch, Elasticsearch then processes this request and Responds back to the user, through the Server.","title":"ElasticSearch"},{"location":"weekly/week2/week2-1/#elasticsearch-architecture-key-components","text":"Elasticsearch Cluster is composed of a group of nodes that store data. Elasticsearch Node is an instance that runs in a cluster. Multiple nodes can be run on a single machine. When Elastic is running, you will have an instance of elastic known as Node. Each Node Has a unique ID and a node. Each Node belongs to a single cluster. Data is stored as documents in Elasticsearch. Indices are used to group documents that are related to each other. When an Index is created, it comes with a Shard, by default. There are the three main options to configure an Elasticsearch node: Elasticsearch master node Elasticsearch data node Elasticsearch client node Search movement - client --> servers --> ElasticSearch Shards is where data is stored. What you create an Index, you can create multiple shards that are distributed across nodes. Each shard has its replica to recover data in case of node failure. The primary shard and replica shard is always placed on different nodes. Horizontal scaling or scale-out is the main reason to shard a database. The number of shards depends heavily on the amount of data we have. Shard Example use Case 1 A BCBSNC Elastic engineer has 900k documents that they want to store. Each Shard can only Hold a maximum of 300k Documents Two more shards of 300GB each will be added bringing the total storage capacity to 900K Documents Shard Example use Case 2 Scenario 1: An Elastic engineer searches 500k documents that is stored in a single Shard The response time for searching 500k Documents in a single shard is 10 seconds. Scenario 2: An Elastic engineer runs a parallel searches of 500k documents that are distributed in 5 Shard. The response time for searching 100k Documents/Shard will be 2 seconds. So, the response time for searching all 500k Documents that are distributed amongst the 5 shard will still be 2 seconds.","title":"Elasticsearch Architecture: Key Components"},{"location":"weekly/week2/week2-1/#kibana","text":"Kibana is a data visualization and exploration tool used for log and time-series analytics, application monitoring, and operational intelligence use cases. It offers powerful and easy-to-use features such as histograms, line graphs, pie charts, heat maps, and built-in geospatial support. Kibana Aggregations There are two main types of aggregations Metric aggregations are used to calculate a value for each bucket based on the documents inside the bucket. Bucket aggregations are used groups documents together in one bucket according to your logic and requirements, while the Metric aggregations For More information on Kibana,: Click link","title":"Kibana"},{"location":"weekly/week2/week2/","text":"Adding a git repository If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown. Configuration Repository :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks. Repository name :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material Repository icon :octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash Code actions :octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Revisioning The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved. Document dates :octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document contributors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document authors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Getting started"},{"location":"weekly/week2/week2/#adding-a-git-repository","text":"If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown.","title":"Adding a git repository"},{"location":"weekly/week2/week2/#configuration","text":"","title":"Configuration"},{"location":"weekly/week2/week2/#repository","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks.","title":"Repository"},{"location":"weekly/week2/week2/#repository-name","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material","title":"Repository name"},{"location":"weekly/week2/week2/#repository-icon","text":":octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash","title":"Repository icon"},{"location":"weekly/week2/week2/#code-actions","text":":octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard:","title":"Code actions"},{"location":"weekly/week2/week2/#revisioning","text":"The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved.","title":"Revisioning"},{"location":"weekly/week2/week2/#document-dates","text":":octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document dates"},{"location":"weekly/week2/week2/#document-contributors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document contributors"},{"location":"weekly/week2/week2/#document-authors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Document authors"},{"location":"weekly/week3/week3-1/","text":"Adding a comment system Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend. Customization Giscus integration Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: ``` html <script src=\"https://giscus.app/client.js\" data-repo=\" / \" data-repo-id=\"...\" data-category=\"...\" data-category-id=\"...\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"1\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async ``` The comments.html partial (empty by default) is the best place to add the snippet generated by Giscus . Follow the guide on theme extension and override the comments.html partial with: {% if page.meta.comments %} <h2 id=\"__comments\">{{ lang.t(\"meta.comments\") }}</h2> <!-- Insert generated snippet here --> <!-- Synchronize Giscus theme with palette --> <script> var giscus = document.querySelector(\"script[src*=giscus]\") /* Set palette on initial load */ var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" giscus.setAttribute(\"data-theme\", theme) // (1)! } /* Register event handlers after documented loaded */ document.addEventListener(\"DOMContentLoaded\", function() { var ref = document.querySelector(\"[data-md-component=palette]\") ref.addEventListener(\"change\", function() { var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document.querySelector(\".giscus-frame\") frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \"https://giscus.app\" ) } }) }) </script> {% endif %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the comments front matter property to true : --- comments: true --- # Document title ... If you wish to enable comments for an entire folder, you can use the built-in meta plugin .","title":"Hands On"},{"location":"weekly/week3/week3-1/#adding-a-comment-system","text":"Material for MkDocs allows to easily add the third-party comment system of your choice to the footer of any page by using theme extension . As an example, we'll be integrating Giscus , which is Open Source, free, and uses GitHub discussions as a backend.","title":"Adding a comment system"},{"location":"weekly/week3/week3-1/#customization","text":"","title":"Customization"},{"location":"weekly/week3/week3-1/#giscus-integration","text":"Before you can use Giscus , you need to complete the following steps: Install the Giscus GitHub App and grant access to the repository that should host comments as GitHub discussions. Note that this can be a repository different from your documentation. Visit Giscus and generate the snippet through their configuration tool to load the comment system. Copy the snippet for the next step. The resulting snippet should look similar to this: ``` html <script src=\"https://giscus.app/client.js\" data-repo=\" / \" data-repo-id=\"...\" data-category=\"...\" data-category-id=\"...\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"1\" data-theme=\"light\" data-lang=\"en\" crossorigin=\"anonymous\" async ``` The comments.html partial (empty by default) is the best place to add the snippet generated by Giscus . Follow the guide on theme extension and override the comments.html partial with: {% if page.meta.comments %} <h2 id=\"__comments\">{{ lang.t(\"meta.comments\") }}</h2> <!-- Insert generated snippet here --> <!-- Synchronize Giscus theme with palette --> <script> var giscus = document.querySelector(\"script[src*=giscus]\") /* Set palette on initial load */ var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" giscus.setAttribute(\"data-theme\", theme) // (1)! } /* Register event handlers after documented loaded */ document.addEventListener(\"DOMContentLoaded\", function() { var ref = document.querySelector(\"[data-md-component=palette]\") ref.addEventListener(\"change\", function() { var palette = __md_get(\"__palette\") if (palette && typeof palette.color === \"object\") { var theme = palette.color.scheme === \"slate\" ? \"dark\" : \"light\" /* Instruct Giscus to change theme */ var frame = document.querySelector(\".giscus-frame\") frame.contentWindow.postMessage( { giscus: { setConfig: { theme } } }, \"https://giscus.app\" ) } }) }) </script> {% endif %} This code block ensures that Giscus renders with a dark theme when the palette is set to slate . Note that multiple dark themes are available, so you can change it to your liking. Replace the highlighted line with the snippet you generated with the Giscus configuration tool in the previous step. If you copied the snippet from above, you can enable comments on a page by setting the comments front matter property to true : --- comments: true --- # Document title ... If you wish to enable comments for an entire folder, you can use the built-in meta plugin .","title":"Giscus integration"},{"location":"weekly/week3/week3/","text":"Adding a git repository If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown. Configuration Repository :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks. Repository name :octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material Repository icon :octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash Code actions :octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Revisioning The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved. Document dates :octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document contributors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk. Document authors :octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Getting started"},{"location":"weekly/week3/week3/#adding-a-git-repository","text":"If your documentation is related to source code, Material for MkDocs provides the ability to display information to the project's repository as part of the static site, including stars and forks. Furthermore, the date of last update and creation , as well as contributors can be shown.","title":"Adding a git repository"},{"location":"weekly/week3/week3/#configuration","text":"","title":"Configuration"},{"location":"weekly/week3/week3/#repository","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: none In order to display a link to the repository of your project as part of your documentation, set repo_url in mkdocs.yml to the public URL of your repository, e.g.: repo_url: https://github.com/squidfunk/mkdocs-material The link to the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Additionally, for public repositories hosted on GitHub or GitLab , the number of stars and forks is automatically requested and rendered. GitHub repositories also include the tag of the latest release.[^1] [^1]: Unfortunately, GitHub only provides an API endpoint to obtain the latest release - not the latest tag. Thus, make sure to create a release (not pre-release) for the latest tag you want to display next to the number of stars and forks.","title":"Repository"},{"location":"weekly/week3/week3/#repository-name","text":":octicons-tag-24: 0.1.0 \u00b7 :octicons-milestone-24: Default: automatically set to GitHub , GitLab or Bitbucket MkDocs will infer the source provider by examining the URL and try to set the repository name automatically. If you wish to customize the name, set repo_name in mkdocs.yml : repo_name: squidfunk/mkdocs-material","title":"Repository name"},{"location":"weekly/week3/week3/#repository-icon","text":":octicons-tag-24: 5.0.0 \u00b7 :octicons-milestone-24: Default: :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt While the default repository icon is a generic git icon, it can be set to any icon bundled with the theme by referencing a valid icon path in mkdocs.yml : theme: icon: repo: fontawesome/brands/git-alt # (1)! Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard: Some popular choices: :fontawesome-brands-git: \u2013 fontawesome/brands/git :fontawesome-brands-git-alt: \u2013 fontawesome/brands/git-alt :fontawesome-brands-github: \u2013 fontawesome/brands/github :fontawesome-brands-github-alt: \u2013 fontawesome/brands/github-alt :fontawesome-brands-gitlab: \u2013 fontawesome/brands/gitlab :fontawesome-brands-gitkraken: \u2013 fontawesome/brands/gitkraken :fontawesome-brands-bitbucket: \u2013 fontawesome/brands/bitbucket :fontawesome-solid-trash: \u2013 fontawesome/solid/trash","title":"Repository icon"},{"location":"weekly/week3/week3/#code-actions","text":":octicons-tag-24: 9.0.0 \u00b7 :octicons-unlock-24: Feature flag If the repository URL points to a valid GitHub , GitLab or Bitbucket repository, MkDocs provides a setting called edit_uri , which resolves to the subfolder where your documentation is hosted. If your default branch is called main , change the setting to: edit_uri: edit/main/docs/ After making sure that edit_uri is correctly configured, buttons for code actions can be added. Two types of code actions are supported: edit and view (GitHub only): === \":material-file-edit-outline: Edit this page\" ``` yaml theme: features: - content.action.edit ``` === \":material-file-eye-outline: View source of this page\" ``` yaml theme: features: - content.action.view ``` The icon of the edit and view buttons can be changed with the following lines: theme: icon: edit: material/pencil # (1)! view: material/eye Enter a few keywords to find the perfect icon using our icon search and click on the shortcode to copy it to your clipboard:","title":"Code actions"},{"location":"weekly/week3/week3/#revisioning","text":"The following plugins are fully integrated with Material for MkDocs, allowing for showing the date of last update and creation of a document, as well as links to all contributors or authors involved.","title":"Revisioning"},{"location":"weekly/week3/week3/#document-dates","text":":octicons-tag-24: 4.6.0 \u00b7 :octicons-cpu-24: Plugin The git-revision-date-localized plugin adds support for adding the date of last update and creation of a document at the bottom of each page. Install it with pip : pip install mkdocs-git-revision-date-localized-plugin Then, add the following lines to mkdocs.yml : plugins: - git-revision-date-localized: enable_creation_date: true The following configuration options are supported: enabled { #+git-revision-date-localized.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-revision-date-localized: enabled: !ENV [CI, false] ``` type { #+git-revision-date-localized.type } : :octicons-milestone-24: Default: date \u2013 The format of the date to be displayed. Valid values are date , datetime , iso_date , iso_datetime and timeago : ``` yaml plugins: - git-revision-date-localized: type: date ``` enable_creation_date { #+git-revision-date-localized.enable_creation_date } : :octicons-milestone-24: Default: false \u2013 Enables the display of the creation date of the file associated with the page next to the last updated date at the bottom of the page: ``` yaml plugins: - git-revision-date-localized: enable_creation_date: true ``` fallback_to_build_date { #+git-revision-date-localized.fallback_to_build_date } : :octicons-milestone-24: Default: false \u2013 Enables falling back to the time when mkdocs build was executed. Can be used as a fallback when the build is performed outside of a git repository: ``` yaml plugins: - git-revision-date-localized: fallback_to_build_date: true ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document dates"},{"location":"weekly/week3/week3/#document-contributors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-committers [^2] plugin renders the GitHub avatars of all contributors, linking to their GitHub profiles at the bottom of each page. As always, it can be installed with pip : [^2]: We currently recommend using a fork of the git-committers plugin, as it contains many improvements that have not yet been merged back into the original plugin. See byrnereese/mkdocs-git-committers-plugin#12 for more information. pip install mkdocs-git-committers-plugin-2 Then, add the following lines to mkdocs.yml : plugins: - git-committers: repository: squidfunk/mkdocs-material branch: main The following configuration options are supported: enabled { #+git-committers.enabled } : :octicons-milestone-24: Default: true \u2013 This option specifies whether the plugin is enabled when building your project. If you want to switch the plugin off, e.g. for local builds, use an environment variable : ``` yaml plugins: - git-committers: enabled: !ENV [CI, false] ``` repository { #+git-committers.repository } : :octicons-milestone-24: Default: none \u00b7 :octicons-alert-24: Required \u2013 This property must be set to the slug of the repository that contains your documentation. The slug must follow the pattern <username>/<repository> : ``` yaml plugins: - git-committers: repository: squidfunk/mkdocs-material ``` branch { #+git-committers.branch } : :octicons-milestone-24: Default: master \u2013 This property should be set to the branch of the repository from which to retrieve the contributors. To use the main branch: ``` yaml plugins: - git-committers: branch: main ``` The other configuration options of this extension are not officially supported by Material for MkDocs, which is why they may yield unexpected results. Use them at your own risk.","title":"Document contributors"},{"location":"weekly/week3/week3/#document-authors","text":":octicons-heart-fill-24:{ .mdx-heart } Sponsors only { .mdx-insiders } \u00b7 :octicons-tag-24: insiders-4.19.0 \u00b7 :octicons-cpu-24: Plugin \u00b7 :octicons-beaker-24: Experimental The git-authors plugin extracts the authors of a document from git to display them at the bottom of each page. It's a lightweight alternative to the git-committers plugin. Install it with pip : pip install mkdocs-git-authors-plugin Then, add the following lines to mkdocs.yml : plugins: - git-authors","title":"Document authors"}]}